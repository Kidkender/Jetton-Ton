;; Jetton Wallet Smart Contract 

#include "imports/stdlib.fc";
#include "imports/op-code.fc";
#include "imports/jetton-utils.fc";
#include "imports/params.fc";

#pragma version >=0.2.0;
  
int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON
int gas_consumption() asm "15000000 PUSHINT"; ;;0.015 TON

(int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}

() save_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
    set_data(pack_jetton_wallet_data(balance, owner_address, jetton_master_address, jetton_wallet_code));
} 

{-
    transfer query_id: uint64
                amount: varUInteger16
                destination: MsgAddress
                response_destionation: MsgAddress
                custom_payload: Cell
                forward_ton_amount: varUinteger16
                forward_payload: Either Cell ^Cell

-}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    force_chain(to_owner_address);
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    balance -= jetton_amount;

    throw_unless(705, equal_slices(owner_address ,sender_address));
    throw_unless(706, balance >= 0); ;; Token must be large than 0

    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);
    slice either_forward_payload = in_msg_body;

    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(to_wallet_address)
                .store_coins(0)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 +1)
                .store_ref(state_init);

    var msg_body = begin_cell()
                    .store_uint(op::internal_transfer(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(owner_address)
                    .store_slice(response_address)
                    .store_coins(forward_ton_amount)
                    .store_slice(either_forward_payload)
                    .end_cell();

    msg = msg.store_ref(msg_body);
    int fwd_count = forward_ton_amount ? 2 : 1;

    ;; 3 Message: wallet1 -> wallet 2, wallet2 -> owner, wallet2 -> response
    throw_unless(709, msg_value > forward_ton_amount + fwd_count * fwd_fee + (2 * gas_consumption() + min_tons_for_storage()));

    send_raw_message(msg.end_cell(), 64);
    save_data(balance,owner_address,jetton_master_address,jetton_wallet_code);
}

{-
    internal_transfer query_id: uint64
                        amount varUInteger16
                        from: MsgAddress
                        response_address: MsgAddress
                        forward_ton_amount: varUinteger16
                        forward_payload: Either Cell ^Cell
-}

() receive_tokens(slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    
    slice user_wallet_address = calcualte_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code);
    throw_unless(707, equal_slices(jetton_master_address , sender_address), equal_slices( user_wallet_address, sender_address));

    int forward_ton_amount = in_msg_body~load_coins();
    int ton_balance_before_msg = my_ton_balance - msg_value;
    int storage_fee =min_tons_for_storage() - min(ton_balance_before_msg, min_tons_for_storage());
    
    msg_value -= (storage_fee + gas_consumption());
    if (forward_ton_amount) {
        msg_value -= (storage)
        slice either_forward_payload = in_msg_body;

        var msg_body = begin_cell()
                        .store_uint(op::transfer_notification(), 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(from_address)
                        .store_slice(either_forward_payload)
                        .end_cell();

        var msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(owner_address)
                    .store_coins(forward_ton_amount)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(msg_body)
                    .end_cell();
        send_raw_message( msg ,1);
    }

    if ((response_address.preload_uint(2) != 0 ) & (msg_value > 0)) {
        var msg = begin_cell()
                    .store_uint(0x10, 6)  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
                    .store_slice(response_address)
                    .store_coins(msg_value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::excesses(), 32)
                    .store_uint(query_id, 64);
        send_raw_message(msg.end_cell() , 2);

    } 

    save_data(balance,owner_address,jetton_master_address,jetton_wallet_code);
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();

    ;; Can ignore custom_payload
    slice custom_payload = in_msg_body~load_dict();
    balance -= jetton_amount;
    throw_unless(705, equal_slices(owner_address ,sender_address));
    throw_unless(706, balance >0);
    throw_unless(707, msg_value > fwd_fee + 2* gas_consumption());

    var msg_body = begin_cell()
                    .store_uint(op::burn_notification(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(owner_address)
                    .store_slice(response_address)
                    .end_cell();

    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_master_address)
                .store_coins(0)
                .store_uint(1, 1+ 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 64);

    save_data(balance,owner_address,jetton_master_address,jetton_wallet_code);
}

() onbounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;;0xFFFFFFF
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    save_data(balance,owner_address,jetton_master_address,jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_body.begin_parse();
    int flag = cs~load_uint(4);
    if (flag & 1) {
        onbounce(in_msg_body);
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; ignore destionation address
    cs~load_coins(); ;; ignore coin
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; ignore ihr_fee
    int fwd_fee = muldev(cs~load_coins(), 3, 2); ;; using message fwd_fee for estimation of forward payload costs

    int op = in_msg_body~load_uint(32);

    ;; outgoing transfer
    if (op == op::transfer()) {
        send_tokens(in_msg_body,sender_address,msg_value,fwd_fee);
        return ();
    }

    ;; incomming transfer
    if (op == op::internal_transfer()) {
        receive_tokens(in_msg_body,sender_address,my_ton_balance,fwd_fee,msg_value);
        return ();
    }

    ;; burn token
    if (op == op::burn()) {
        burn_tokens(in_msg_body,sender_address,msg_value,fwd_fee);
        return ();
    }

    throw(0xffff);
    
}

(int, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}
