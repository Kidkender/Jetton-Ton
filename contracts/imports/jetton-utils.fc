;; The pack_jetton_wallet_data function takes the balance, owner’s address,
;; jetton master’s address, and the wallet’s code as input, then stores them into a cell.

cell pack_jetton_wallet_data(
    int balance, 
    slice owner_address, 
    slice jetton_master_address, 
    cell jetton_wallet_code) inline {
    return begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}

;; Purpose: This function calculates the initial state of the jetton wallet. 
;; The "initial state" is the default configuration of the wallet when it is created or deployed on the blockchain. 
;; It combines the owner's address, jetton master's address, 
;; and the wallet's code into a cell that represents the wallet's starting state.

cell calculate_jetton_wallet_state_init(
    slice owner_address, 
    slice jetton_master_address, 
    cell jetton_wallet_code) inline {
    return begin_cell()
            .store_uint(0, 2)
            .store_dict(jetton_wallet_code)
            .store_dict(pack_jetton_wallet_data(0,owner_address,jetton_master_address,jetton_wallet_code))
            .store_uint(0, 1)
            .end_cell();
}


;; Get contract address of jetton 
slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
            .store_uint(4, 3)
            .store_uint(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

slice calculate_user_jetton_wallet_address(
    slice owner_address, 
    slice jetton_master_address, 
    cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(
        calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}